@page "/home-banner/add"
@page "/home-banner/edit/{Id:int}"
@rendermode InteractiveServer

@inject IJSRuntime _js
@inject NavigationManager _navManager
@inject IHomeBannerRepository _homeRepo

<PageTitle>Home Banner</PageTitle>


<div class="max-w-7xl mx-auto">
    <div class="">


        @if(homeBanner is not null)
        {



        <EditForm EditContext="EditContext" OnSubmit="OnSubmitForm">
            <DataAnnotationsValidator />

            <div class="shadow sm:rounded-md">

                <Ecaq.Components.Pages.Components.MyTabPage TabItems="@TabItems" TabItemSelectedCallback="TabItemCallback">
                @switch (TabItemSelected!.Id)
                {
                    case 1:




                            <div class="bg-green-50 sm:p-6">
                                    <div>
                                        @*<h2 id="payment-details-heading" class="text-xl leading-6 font-medium text-gray-900">Profile</h2>*@
                                        @*<p class="mt-1 text-sm text-gray-500">This information will be displayed publicly so be careful what you share.</p>*@
                                    </div>

                                    <div>

                                        <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">


                                            
                                            <div class="sm:col-span-3">
                                                <MyInputText BgColor="bg-green-50" Label="Title" inputType="@inputType" @bind-Value="@homeBanner!.Name">
                                                    @* <IconLeft>
                                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-appGrayLight">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z" />
                                                    </svg>
                                                    </IconLeft>
                                                    <IconRight>
                                                    <svg @onclick="ToggleShowPwd" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="cursor-pointer w-5 h-5 text-appGrayLight">
                                                    @if (inputType == "password")
                                                    {
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z" />
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                    }
                                                    else
                                                    {
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M3.98 8.223A10.477 10.477 0 001.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.45 10.45 0 0112 4.5c4.756 0 8.773 3.162 10.065 7.498a10.523 10.523 0 01-4.293 5.774M6.228 6.228L3 3m3.228 3.228l3.65 3.65m7.894 7.894L21 21m-3.228-3.228l-3.65-3.65m0 0a3 3 0 10-4.243-4.243m4.242 4.242L9.88 9.88" />
                                                    }
                                                    </svg>
                                                    </IconRight> *@
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => homeBanner.Name" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputText>
                                            </div>
                                            <div class="sm:col-span-3"></div>

                                            <div class="sm:col-span-2">
                                                <MyInputText BgColor="bg-green-50" Label="Button Label" inputType="@inputType" @bind-Value="@homeBanner!.ButtonText">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => homeBanner.ButtonText" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputText>
                                            </div>
                                            <div class="sm:col-span-2">
                                                <MyInputText BgColor="bg-green-50" Label="Button Url" inputType="@inputType" @bind-Value="@homeBanner!.ButtonUrl">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => homeBanner.ButtonUrl" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputText>
                                            </div>

                                            <div class="sm:col-span-2">
                                                <MyInputToggle BgColor="bg-green-50" Label="Is External Link">
                                                    <Toggle>
                                                        <span @onclick="@OnButtonExternalClicked" class="@(homeBanner.ButtonUrlExternal ? "bg-indigo-500" : "bg-gray-200") mt-0.5 relative inline-block flex items-center h-5 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:shadow-outline" role="checkbox" tabindex="0">
                                                            <span class="@(homeBanner.ButtonUrlExternal ? "translate-x-5" : "translate-x-0") inline-block h-4 w-5 rounded-full bg-white shadow transform transition ease-in-out duration-200"></span>
                                                        </span>
                                                    </Toggle>
                                                </MyInputToggle>
                                            </div>

                                            
                                            @* <div class="sm:col-span-4">
                                                <label for="first-name" class="block text-sm font-medium text-gray-700">Gallery Path</label>
                                                <div class="mt-1">
                                                    <InputText type="text" @bind-Value="homeBanner!.PathUrl" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" />
                                                </div>
                                            </div> *@

                                            <div class="sm:col-span-2">
                                                <MyInputToggle BgColor="bg-green-50" Label="Is Active">
                                                    <Toggle>
                                                        <span @onclick="@OnIsActiveClicked" class="@(homeBanner.IsActive ? "bg-indigo-500" : "bg-gray-200") mt-0.5 relative inline-block flex items-center h-5 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:shadow-outline" role="checkbox" tabindex="0">
                                                            <span class="@(homeBanner.IsActive ? "translate-x-5" : "translate-x-0") inline-block h-4 w-5 rounded-full bg-white shadow transform transition ease-in-out duration-200"></span>
                                                        </span>
                                                    </Toggle>
                                                </MyInputToggle>
                                            </div>


                                            <div class="sm:col-span-6">
                                                <label for="about" class="block text-sm font-medium text-gray-700">Description</label>
                                                <div class="mt-1">
                                                    <Editor ApiKey="no-api-key"
                                                            Field="() => homeBanner.Desc" @bind-Value="homeBanner.Desc"
                                                    JsConfSrc="TinyBlzRoxy"
                                                    ScriptSrc="lib/tinymce/js/tinymce.min.js"></Editor>
                                                    <p class="mt-2 text-sm text-gray-500">Write a few sentences.</p>
                                                </div>
                                            </div>

                                        </div>

                                    </div>



                                </div>


                        break;
                    case 2:
                            <div class="bg-indigo-50 sm:p-6">
                                <div>
                                    @*<h2 id="payment-details-heading" class="text-xl leading-6 font-medium text-gray-900">Company</h2>*@
                                </div>
                                
                                    <div>

                                        <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">

                                            <div class="sm:col-span-2">
                                                <MyInputText BgColor="bg-indigo-50" Label="Video Url" inputType="@inputType" @bind-Value="@homeBanner!.VideoUrl">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => homeBanner.VideoUrl" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputText>
                                            </div>
                                            <div class="sm:col-span-2">
                                               <MyInputTextQID BgColor="bg-indigo-50" Label="Video Duration" inputType="number" @bind-Value="@homeBanner!.VideoDuration" MaxLength="11">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => homeBanner.VideoDuration" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputTextQID>
                                                @* <MyInputNumber BgColor="bg-green-50" Label="Video Duration" inputType="number" @bind-Value="@homeBanner!.VideoDuration">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => homeBanner.VideoDuration" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputNumber> *@
                                            </div>

                                            <div class="sm:col-span-2">
                                                <MyInputToggle BgColor="bg-indigo-50" Label="Is Video">
                                                    <Toggle>
                                                        <span @onclick="@OnIsVideoClicked" class="@(homeBanner.IsVideo ? "bg-indigo-500" : "bg-gray-200") mt-0.5 relative inline-block flex items-center h-5 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:shadow-outline" role="checkbox" tabindex="0">
                                                            <span class="@(homeBanner.IsVideo ? "translate-x-5" : "translate-x-0") inline-block h-4 w-5 rounded-full bg-white shadow transform transition ease-in-out duration-200"></span>
                                                        </span>
                                                    </Toggle>
                                                </MyInputToggle>
                                            </div>


                                            <div class="sm:col-span-2">
                                                <label for="mobile" class="block text-sm font-medium text-gray-700">Thumbnail</label>
                                                <div class="mt-1 flex items-center cursor-pointer">
                                                    <img @onclick="@(() => ShowRoxyModal("customInput", "customImage"))" src="@homeBanner!.ImageMobile" id="customImage" />
                                                </div>
                                                @* <div class="flex-none w-full relative">
                                                    <img @onclick="@(() => ShowRoxyModal("customInput", "customImage"))" src="@homeBanner!.ImageMobile" id="customImage" class="absolute inset-0 w-full h-full object-cover" loading="lazy" />
                                                </div> *@
                                            </div>

                                            <div class="sm:col-span-4">
                                                <label for="desktop" class="block text-sm font-medium text-gray-700">Photo</label>
                                                <div class="mt-1 flex items-center cursor-pointer">
                                                    <img @onclick="@(() => ShowRoxyModal("ImageUrlToInput1", "customImage1"))" src="@homeBanner!.ImageDesktop" id="customImage1" />
                                                </div>
                                            </div>

                                        </div>

                                    </div>

                            </div>
                        break;
                    case 3:
                            <div class="bg-red-50 sm:p-6">
                                <div>
                                    @*<h2 id="payment-details-heading" class="text-xl leading-6 font-medium text-gray-900">Promotions</h2>*@
                                </div>
                            </div>
                        break;
                }
            </Ecaq.Components.Pages.Components.MyTabPage>




                <div class="px-4 py-3 bg-gray-50 text-right sm:px-6 space-x-2">
                    <button type="button" @onclick="GoBack" class="bg-appBlack border border-transparent rounded-md shadow-sm py-2 px-4 inline-flex justify-center text-sm font-medium text-white">Cancel</button>
                    <button type="submit" disabled="@(!context.Validate())" class="@(!EditContext!.Validate() ? "bg-appGrayLight":"bg-appPriBlue hover:bg-appSecBlue") border border-transparent rounded-md shadow-sm py-2 px-4 inline-flex justify-center text-sm font-medium text-white">Save</button>
                </div>
            </div>

        </EditForm>


        }


    </div>
</div>

<div class="@(showRoxy ? "" : "hidden")">
    <RoxyModal ElemInput="@ElemInputId" ElemImg="@ElemImgId" OnClose="UpdateImageModelBinding" />
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    HomeBanner? homeBanner = new();
    public EditContext? EditContext;
    CrudOperation crudOperation = CrudOperation.Add;

    List<TabItem>? TabItems;
    TabItem? TabItemSelected;
    string inputType = "text";
    protected override async Task OnInitializedAsync()
    {
        TabItems = TabItem.TabItems();
        //TabItems = TabItems!.ToList();
        TabItemSelected = TabItems.FirstOrDefault()!;

        if(Id > 0)
        {
            // Warning: do not use FindAsync here.
            homeBanner = _homeRepo.GetById(Id);
            crudOperation = CrudOperation.Edit;
        }
        else
        {            
            homeBanner.ImageMobile = "/myassets/resources/banner-mobile.jpg";
            homeBanner.ImageDesktop = "/myassets/resources/banner-desktop.jpg";
        }

        EditContext = new(homeBanner!);

        //EditContext.NotifyValidationStateChanged();
        //EditContext.OnFieldChanged += EditContext_OnFieldChanged!;

        await base.OnInitializedAsync();
    }
    public void ToggleShowPwd()
    {
        if (inputType == "password")
        {
            inputType = "text";
        }
        else
        {
            inputType = "password";
        }
        //StateHasChanged();
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        //Console.WriteLine($"EditContext_OnFieldChanged - {e.FieldIdentifier.FieldName}");

        //FieldIdentifier fieldIdentifier = EditContext!.Field(e.FieldIdentifier.FieldName);

        //EditContext!.Validate();
        //StateHasChanged();
    }

    void TabItemCallback(TabItem selectedTabItem)
    {
        TabItemSelected = selectedTabItem;
    }


    private void OnButtonExternalClicked()
    {
        homeBanner!.ButtonUrlExternal = !homeBanner.ButtonUrlExternal;
    }
    private void OnIsVideoClicked()
    {
        homeBanner!.IsVideo = !homeBanner.IsVideo;
    }

    private void OnIsActiveClicked()
    {
        homeBanner!.IsActive = !homeBanner.IsActive;
    }

    async void OnSubmitForm()
    {
        if (!EditContext!.GetValidationMessages().Any())
        {
            await SaveAsync(homeBanner!);
            GoBack();
        }
    }

    async Task SaveAsync(HomeBanner homeBanner)
    {

        switch (crudOperation)
        {
            case CrudOperation.Add:
                await _homeRepo.CreateAsync(homeBanner);
                //await _db.SampleProfiles.AddAsync(profile);
                break;
            case CrudOperation.Edit:
                await _homeRepo.UpdateAsync(homeBanner);
                break;
            case CrudOperation.Delete:
                _homeRepo.Delete(homeBanner);
                break;
            default:
                break;
        }
    }









    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        //await jsRuntime.InvokeVoidAsync("renderHeroSlider");
        if (firstRender)
        {
            //await js.CKEditorFileman1();
            //await js.CKEditorFileman2();
        }

    }






    private bool showRoxy = false;
    private string ElemInputId = "";
    private string ElemImgId = "";
    async void UpdateImageModelBinding()
    {
        showRoxy = false;
        string returnImage = await _js.InvokeAsync<string>("RoxyReturnImage", ElemImgId);
        switch (ElemImgId)
        {
            case "customImage":
                homeBanner!.ImageMobile = returnImage;
                break;
            case "customImage1":
                homeBanner!.ImageDesktop = returnImage;
                break;
        }

        //// Use for returning path url only
        //int lastSlash = returnImage.LastIndexOf('/');
        //homeBanner!.PathUrl = (lastSlash > -1) ? returnImage.Substring(0, lastSlash) : returnImage;

        StateHasChanged();
    }
    private void ShowRoxyModal(string elemInputId, string elemImgId)
    {
        ElemInputId = elemInputId;
        ElemImgId = elemImgId;
        showRoxy = true;
    }

    void GoBack() => _navManager.NavigateTo("/home-banner");

}




