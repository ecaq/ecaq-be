@* @using AabBts.Core.Entities.Dtos.FormsDto; *@


@inject IJSRuntime _js
@* @inject IDialogService DialogService *@



<div class="inline-block align-bottom bg-white rounded-lg text-left overflow-y-auto shadow-xl transform transition-all sm:align-middle sm:max-w-5xl sm:w-full sm:max-h-screen min-h-fit">
    <div class="">



        <EditForm EditContext="EditContext" OnSubmit="OnSubmitForm">
            <DataAnnotationsValidator />




            <div class="shadow sm:rounded-md">
                <div class="bg-white sm:p-6">
                    <div class="sticky">
                        <h2 id="payment-details-heading" class="text-lg leading-6 font-medium text-gray-900">@TitleOperation</h2>
                        <p class="mt-1 text-sm text-gray-500">This information will be displayed publicly so be careful what you share.</p>
                    </div>

                    <div>

                        <div class="mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">

                                <div class="sm:col-span-2">
                                    <label for="first-name" class="block text-sm font-medium text-gray-700">First name</label>
                                    <div class="mt-1">
                                        <InputText type="text" @bind-Value="SampleProfile!.Name" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" />
                                    </div>
                                </div>
                                <div class="sm:col-span-2">
                                    @*<label for="first-name" class="block text-sm font-medium text-gray-700">First name</label>
                                    <div class="mt-1">
                                        <InputText type="text" @bind-Value="SampleProfile!.Name" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" />
                                    </div>*@
                                </div>

                            <div class="sm:col-span-2">
                                @*<label for="country" class="block text-sm font-medium text-gray-700">Country</label>
                                <div class="mt-1">
                                    <select id="country" name="country" autocomplete="country-name" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                        <option>United States</option>
                                        <option>Canada</option>
                                        <option>Mexico</option>
                                    </select>
                                </div>*@
                            </div>
                            <div class="sm:col-span-4">
                                <label for="first-name" class="block text-sm font-medium text-gray-700">Gallery Path</label>
                                <div class="mt-1">
                                    <InputText type="text" @bind-Value="SampleProfile!.PathUrl" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" />
                                </div>
                            </div>
                            <div class="sm:col-span-6">
                                <label for="about" class="block text-sm font-medium text-gray-700">About</label>
                                <div class="mt-1">
                                    <Editor ApiKey="no-api-key"
                                            Field="() => SampleProfile.Desc" @bind-Value="SampleProfile.Desc"
                                            JsConfSrc="TinyBlzRoxy"
                                            ScriptSrc="lib/tinymce/js/tinymce.min.js"></Editor>
                                <p class="mt-2 text-sm text-gray-500">Write a few sentences about yourself.</p>
                                </div>
                            </div>

                            <div class="sm:col-span-3">
                                <label for="photo" class="block text-sm font-medium text-gray-700">Thumbnail</label>
                                <div class="mt-1 flex items-center">
                                    <img @onclick="@(() => ShowRoxyModal("customInput", "customImage"))" src="@SampleProfile!.ThumbUrl" id="customImage" style="max-width:240px;cursor:pointer" />
                                </div>
                            </div>
                            <div class="sm:col-span-3">
                                <label for="photo" class="block text-sm font-medium text-gray-700">Photo</label>
                                <div class="mt-1 flex items-center">
                                    <img @onclick="@(() => ShowRoxyModal("ImageUrlToInput1", "customImage1"))" src="@SampleProfile!.ImageUrl" id="customImage1" style="max-width:240px;;cursor:pointer" />
                                </div>
                            </div>

                        </div>
                    </div>



                    <div class="flex justify-end mt-4">
                        <span class="mr-3" id="annual-billing-label">
                            <span class="text-sm font-medium text-gray-900">Is Active </span>
                        </span>
                        <span @onclick="@OnIsActiveClicked" class="@(SampleProfile.IsActive ? "bg-appPriBlue" : "bg-appTextGrayLight") relative inline-block flex-shrink-0 h-5 w-10 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:shadow-outline" role="checkbox" tabindex="0">
                            <span class="@(SampleProfile.IsActive ? "translate-x-5" : "translate-x-0") inline-block h-4 w-4 rounded-full bg-white shadow transform transition ease-in-out duration-200"></span>
                        </span>
                    </div>

                </div>

                <div class="px-4 py-3 bg-gray-50 text-right sm:px-6 space-x-2">
                    @* <button type="button" @onclick="Cancel" class="bg-appBlack border border-transparent rounded-md shadow-sm py-2 px-4 inline-flex justify-center text-sm font-medium text-white">Cancel</button> *@
                    <button type="submit" disabled="@(!context.Validate())" class="@(!EditContext!.Validate() ? "bg-appGrayLight":"bg-appPriBlue hover:bg-appSecBlue") border border-transparent rounded-md shadow-sm py-2 px-4 inline-flex justify-center text-sm font-medium text-white">Save</button>
                </div>
            </div>

        </EditForm>



    </div>
</div>


<div class="@(showRoxy ? "" : "hidden")">
    <RoxyModal ElemInput="@ElemInputId" ElemImg="@ElemImgId" OnClose="UpdateImageModelBinding" />
</div>


@code {
    // [CascadingParameter]
    // MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public string? TitleOperation { get; set; }

    [Parameter]
    public SampleProfile? SampleProfile { get; set; }
    [Parameter]
    public string? ErrorMsg { get; set; }


    public EditContext? EditContext;

    protected override async Task OnInitializedAsync()
    {
        EditContext = new(SampleProfile!);

        //EditContext.NotifyValidationStateChanged();
        EditContext.OnFieldChanged += EditContext_OnFieldChanged!;

        await base.OnInitializedAsync();
        try
        {
        }
        catch (Exception ex)
        {

        }
        //return base.OnInitializedAsync();
    }

    //protected override void OnInitialized()
    //{

    //    EditContext = new(SampleProfile!);

    //    //EditContext.NotifyValidationStateChanged();
    //    EditContext.OnFieldChanged += EditContext_OnFieldChanged!;

    //    base.OnInitialized();
    //}
    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        Console.WriteLine($"EditContext_OnFieldChanged - {e.FieldIdentifier.FieldName}");

        FieldIdentifier fieldIdentifier = EditContext!.Field(e.FieldIdentifier.FieldName);

        EditContext!.Validate();
        StateHasChanged();
    }


    private void OnIsActiveClicked()
    {
        SampleProfile!.IsActive = !SampleProfile.IsActive;
    }


    private async void ThrowMessage(string? itemName, string title, string msg)
    {
        // var parameters = new DialogParameters();
        // parameters.Add("paramString", itemName);
        // parameters.Add("ModalTitle", title);
        // parameters.Add("ModalMessage", msg);

        // var options = new MudBlazor.DialogOptions() { NoHeader = true, DisableBackdropClick = true, MaxWidth = MaxWidth.ExtraSmall };

        // var dialog = DialogService.Show<Throw>("Delete", parameters, options);
        // var result = await dialog.Result;

        // if (!result.Cancelled)
        // {
        // }
    }




    private bool showRoxy = false;
    private string ElemInputId = "";
    private string ElemImgId = "";
    async void UpdateImageModelBinding()
    {
        showRoxy = false;
        string returnImage = await _js.InvokeAsync<string>("RoxyReturnImage", ElemImgId);
        switch (ElemImgId)
        {
            case "customImage":
                SampleProfile!.ThumbUrl = returnImage;
                break;
            case "customImage1":
                SampleProfile!.ImageUrl = returnImage;
                break;
        }

    }
    private void ShowRoxyModal(string elemInputId, string elemImgId)
    {
        ElemInputId = elemInputId;
        ElemImgId = elemImgId;
        showRoxy = true;
    }





    void OnSubmitForm()
    {
        if (!EditContext!.GetValidationMessages().Any())
        {

            //MudDialog?.Close(DialogResult.Ok(SampleProfile));
        }
    }
    //void Cancel() => MudDialog?.Cancel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            EditContext.Validate();

            StateHasChanged();
        }

    }
}