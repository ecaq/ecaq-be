@page "/news/add"
@page "/news/edit/{Id:int}"
@rendermode InteractiveServer

@inject IJSRuntime _js
@inject NavigationManager _navManager
@inject INewsModelRepository _newsRepo

<PageTitle>Home Banner</PageTitle>


<div class="max-w-7xl mx-auto">
    <div class="">


        @if (news is not null)
        {



        <EditForm EditContext="EditContext" OnSubmit="OnSubmitForm">
            <DataAnnotationsValidator />

            <div class="shadow sm:rounded-md">

                <Ecaq.Components.Pages.Components.MyTabPage TabItems="@TabItems" TabItemSelectedCallback="TabItemCallback">
                @switch (TabItemSelected!.Id)
                {
                    case 1:




                            <div class="bg-green-50 sm:p-6">
                                    <div>
                                        @*<h2 id="payment-details-heading" class="text-xl leading-6 font-medium text-gray-900">Profile</h2>*@
                                        @*<p class="mt-1 text-sm text-gray-500">This information will be displayed publicly so be careful what you share.</p>*@
                                    </div>

                                    <div>

                                        <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">


                                            
                                            <div class="sm:col-span-2">
                                                <MyInputText BgColor="bg-green-50" Label="Name" inputType="@inputType" @bind-Value="@news!.Title">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => news.Title" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputText>
                                            </div>
                                            <div class="sm:col-span-2">
                                                <MyInputText BgColor="bg-green-50" Label="Contact" inputType="@inputType" @bind-Value="@news!.Intro">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => news.Intro" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputText>
                                            </div>

                                            <div class="sm:col-span-2">
                                                <div class="relative border border-gray-300 rounded-md px-3 shadow-sm">
                                                    <label for="name" class="absolute bg-green-50 -top-2 left-2 -mt-px inline-block px-1 bg-beeBackground text-xs font-medium text-appBlack">Date Established</label>
                                                    <InputDate id="joinDate" @bind-Value="@news.NewsDate" class="p-0 block w-full border-0 py-2 bg-green-50 focus:ring-0 text-sm outline-none tracking-normal" />
                                                </div>
                                                <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => news.NewsDate" /></p>
                                            </div>


                                            <div class="sm:col-span-2"></div>

                                            <div class="sm:col-span-2">
                                                <MyInputToggle BgColor="bg-green-50" Label="Is Active">
                                                    <Toggle>
                                                        <span @onclick="@OnIsActiveClicked" class="@(news.IsActive ? "bg-indigo-500" : "bg-gray-200") mt-0.5 relative inline-block flex items-center h-5 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:shadow-outline" role="checkbox" tabindex="0">
                                                            <span class="@(news.IsActive ? "translate-x-5" : "translate-x-0") inline-block h-4 w-5 rounded-full bg-white shadow transform transition ease-in-out duration-200"></span>
                                                        </span>
                                                    </Toggle>
                                                </MyInputToggle>
                                            </div>




                                            <div class="sm:col-span-6">
                                                <label for="about" class="block text-sm font-medium text-gray-700">Description</label>
                                                <div class="mt-1">
                                                    <Editor ApiKey="no-api-key"
                                                            Field="() => news.Description" @bind-Value="news.Description"
                                                    JsConfSrc="TinyBlzRoxy"
                                                    ScriptSrc="lib/tinymce/js/tinymce.min.js"></Editor>
                                                    <p class="mt-2 text-sm text-gray-500">Write a few sentences.</p>
                                                </div>
                                            </div>

                                        </div>

                                    </div>



                                </div>


                        break;
                    case 2:
                            <div class="bg-indigo-50 sm:p-6">
                                <div>
                                    @*<h2 id="payment-details-heading" class="text-xl leading-6 font-medium text-gray-900">Company</h2>*@
                                </div>
                                
                                    <div>

                                        <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
@* 
                                            <div class="sm:col-span-2">
                                                <MyInputText BgColor="bg-indigo-50" Label="Video Url" inputType="@inputType" @bind-Value="@ecaqCore!">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => about" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputText>
                                            </div>
                                            <div class="sm:col-span-2">
                                               <MyInputTextQID BgColor="bg-indigo-50" Label="Video Duration" inputType="number" @bind-Value="@ecaqCore!" MaxLength="11">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => about" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputTextQID>
                                            </div> *@


                                            <div class="sm:col-span-2">
                                                <label for="mobile" class="block text-sm font-medium text-gray-700">Logo</label>
                                                <div class="mt-1 flex items-center cursor-pointer">
                                                    <img @onclick="@(() => ShowRoxyModal("customInput", "customImage"))" src="@news!.ImageUrl" id="customImage" />
                                                </div>
                                                @* <div class="flex-none w-full relative">
                                                    <img @onclick="@(() => ShowRoxyModal("customInput", "customImage"))" src="@homeBanner!.ImageMobile" id="customImage" class="absolute inset-0 w-full h-full object-cover" loading="lazy" />
                                                </div> *@
                                            </div>

                                        </div>

                                    </div>

                            </div>
                        break;
                    case 3:
                            <div class="bg-red-50 sm:p-6">
                                <div>
                                    @*<h2 id="payment-details-heading" class="text-xl leading-6 font-medium text-gray-900">Promotions</h2>*@
                                </div>
                            </div>
                        break;
                }
            </Ecaq.Components.Pages.Components.MyTabPage>




                <div class="px-4 py-3 bg-gray-50 text-right sm:px-6 space-x-2">
                    <button type="button" @onclick="GoBack" class="bg-appBlack border border-transparent rounded-md shadow-sm py-2 px-4 inline-flex justify-center text-sm font-medium text-white">Cancel</button>
                    <button type="submit" disabled="@(!context.Validate())" class="@(!EditContext!.Validate() ? "bg-appGrayLight":"bg-appPriBlue hover:bg-appSecBlue") border border-transparent rounded-md shadow-sm py-2 px-4 inline-flex justify-center text-sm font-medium text-white">Save</button>
                </div>
            </div>

        </EditForm>


        }


    </div>
</div>

<div class="@(showRoxy ? "" : "hidden")">
    <RoxyModal ElemInput="@ElemInputId" ElemImg="@ElemImgId" OnClose="UpdateImageModelBinding" />
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    NewsModel? news = new();
    public EditContext? EditContext;
    CrudOperation crudOperation = CrudOperation.Add;

    List<TabItem>? TabItems;
    TabItem? TabItemSelected;
    string inputType = "text";
    protected override async Task OnInitializedAsync()
    {
        TabItems = TabItem.TabItems();
        //TabItems = TabItems!.ToList();
        TabItemSelected = TabItems.FirstOrDefault()!;

        if(Id > 0)
        {
            // Warning: do not use FindAsync here.
            news = _newsRepo.GetById(Id);
            crudOperation = CrudOperation.Edit;
        }
        else
        {
            news.ImageUrl = "/myassets/resources/banner-desktop.jpg";
            news.NewsDate = DateTime.Now;
        }

        EditContext = new(news!);

        //EditContext.NotifyValidationStateChanged();
        //EditContext.OnFieldChanged += EditContext_OnFieldChanged!;

        await base.OnInitializedAsync();
    }

    private void OnIsActiveClicked()
    {
        news!.IsActive = !news.IsActive;
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        //Console.WriteLine($"EditContext_OnFieldChanged - {e.FieldIdentifier.FieldName}");

        //FieldIdentifier fieldIdentifier = EditContext!.Field(e.FieldIdentifier.FieldName);

        //EditContext!.Validate();
        //StateHasChanged();
    }

    void TabItemCallback(TabItem selectedTabItem)
    {
        TabItemSelected = selectedTabItem;
    }


    async void OnSubmitForm()
    {
        if (!EditContext!.GetValidationMessages().Any())
        {
            await SaveAsync(news!);
            GoBack();
        }
    }

    async Task SaveAsync(NewsModel mdl)
    {

        switch (crudOperation)
        {
            case CrudOperation.Add:
                await _newsRepo.CreateAsync(mdl);
                //await _db.SampleProfiles.AddAsync(profile);
                break;
            case CrudOperation.Edit:
                await _newsRepo.UpdateAsync(mdl);
                break;
            case CrudOperation.Delete:
                _newsRepo.Delete(mdl);
                break;
            default:
                break;
        }
    }









    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        //await jsRuntime.InvokeVoidAsync("renderHeroSlider");
        if (firstRender)
        {
            //await js.CKEditorFileman1();
            //await js.CKEditorFileman2();
        }

    }






    private bool showRoxy = false;
    private string ElemInputId = "";
    private string ElemImgId = "";
    async void UpdateImageModelBinding()
    {
        showRoxy = false;
        string returnImage = await _js.InvokeAsync<string>("RoxyReturnImage", ElemImgId);
        switch (ElemImgId)
        {
            case "customImage":
                news!.ImageUrl = returnImage;
                break;
        }

        //// Use for returning path url only
        //int lastSlash = returnImage.LastIndexOf('/');
        //homeBanner!.PathUrl = (lastSlash > -1) ? returnImage.Substring(0, lastSlash) : returnImage;

        StateHasChanged();
    }
    private void ShowRoxyModal(string elemInputId, string elemImgId)
    {
        ElemInputId = elemInputId;
        ElemImgId = elemImgId;
        showRoxy = true;
    }

    void GoBack() => _navManager.NavigateTo("/news");

}




