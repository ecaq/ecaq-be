@page "/gallery/add"
@page "/gallery/edit/{Id:int}"
@rendermode InteractiveServer

@inject IJSRuntime _js
@inject NavigationManager _navManager
@inject AppDbContext _db

<PageTitle>Counter</PageTitle>


<div class="max-w-7xl mx-auto">
    <div class="">


        @if(gallery is not null)
        {



        <EditForm EditContext="EditContext" OnSubmit="OnSubmitForm">
            <DataAnnotationsValidator />

            <div class="shadow sm:rounded-md">

                <MyTabPage TabItems="@TabItems" TabItemSelectedCallback="TabItemCallback">
                @switch (TabItemSelected!.Id)
                {
                    case 1:




                            <div class="bg-green-50 sm:p-6">
                                    <div>
                                        @*<h2 id="payment-details-heading" class="text-xl leading-6 font-medium text-gray-900">Profile</h2>*@
                                        @*<p class="mt-1 text-sm text-gray-500">This information will be displayed publicly so be careful what you share.</p>*@
                                    </div>

                                    <div>

                                        <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">

                                            <div class="sm:col-span-2">
                                                <MyInputText BgColor="bg-green-50" Label="Name" @bind-Value="@gallery!.Name">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => gallery.Name" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputText>
                                            </div>
                                            <div class="sm:col-span-4">
                                            </div>


                                            <div class="sm:col-span-2">
                                                <MyInputToggle BgColor="bg-green-50" Label="Is Active">
                                                    <Toggle>
                                                        <span @onclick="@OnIsActiveClicked" class="@(gallery.IsActive ? "bg-indigo-500" : "bg-gray-200") mt-0.5 relative inline-block flex items-center h-5 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:shadow-outline" role="checkbox" tabindex="0">
                                                            <span class="@(gallery.IsActive ? "translate-x-5" : "translate-x-0") inline-block h-4 w-5 rounded-full bg-white shadow transform transition ease-in-out duration-200"></span>
                                                        </span>
                                                    </Toggle>
                                                </MyInputToggle>
                                            </div>


                                            <div class="sm:col-span-6">
                                                <label for="about" class="block text-sm font-medium text-gray-700">About</label>
                                                <div class="mt-1">
                                                    <Editor ApiKey="no-api-key"
                                                    Field="() => gallery.Desc" @bind-Value="gallery.Desc"
                                                    JsConfSrc="TinyBlzRoxy"
                                                    ScriptSrc="lib/tinymce/js/tinymce.min.js"></Editor>
                                                    <p class="mt-2 text-sm text-gray-500">Write a few sentences about yourself.</p>
                                                </div>
                                            </div>

                                        </div>
                                    </div>



                                </div>


                        break;
                    case 2:
                            <div class="bg-indigo-50 sm:p-6">
                                <div>
                                    @*<h2 id="payment-details-heading" class="text-xl leading-6 font-medium text-gray-900">Company</h2>*@
                                </div>
                                    <div>
                                        <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">

                                            <div class="sm:col-span-2">
                                                <label for="mobile" class="block text-sm font-medium text-gray-700">Browse Album Thumbnail</label>
                                                <div class="mt-1 flex items-center cursor-pointer">
                                                    <img @onclick="@(() => ShowRoxyModal("customInput", "customImage"))" src="@gallery!.ImageUrl" id="customImage" />
                                                </div>
                                            </div>
                                            <div class="sm:col-span-4"></div>

                                            <div class="sm:col-span-2">
                                                <MyInputText BgColor="bg-indigo-50" Label="Album Path" @bind-Value="@gallery!.PathUrl">
                                                    <ErrorValidationRF>
                                                        <p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => gallery.PathUrl" /></p>
                                                    </ErrorValidationRF>
                                                </MyInputText>
                                            </div>

                                        </div>

                                    </div>
                            </div>
                        break;
                    case 3:
                            <div class="bg-red-50 sm:p-6">
                                <div>
                                    @*<h2 id="payment-details-heading" class="text-xl leading-6 font-medium text-gray-900">Promotions</h2>*@
                                </div>
                            </div>
                        break;
                    case 4:
                            <div class="bg-orange-50 sm:p-6">
                                <div>
                                    @*<h2 id="payment-details-heading" class="text-xl leading-6 font-medium text-gray-900">Supports</h2>*@
                                </div>
                            </div>
                        break;
                }
            </MyTabPage>




                <div class="px-4 py-3 bg-gray-50 text-right sm:px-6 space-x-2">
                    <button type="button" @onclick="GoBack" class="bg-appBlack border border-transparent rounded-md shadow-sm py-2 px-4 inline-flex justify-center text-sm font-medium text-white">Cancel</button>
                    <button type="submit" disabled="@(!context.Validate())" class="@(!EditContext!.Validate() ? "bg-appGrayLight":"bg-appPriBlue hover:bg-appSecBlue") border border-transparent rounded-md shadow-sm py-2 px-4 inline-flex justify-center text-sm font-medium text-white">Save</button>
                </div>
            </div>

        </EditForm>


        }


    </div>
</div>

<div class="@(showRoxy ? "" : "hidden")">
    <RoxyModal ElemInput="@ElemInputId" ElemImg="@ElemImgId" OnClose="UpdateImageModelBinding" />
</div>

@code
{
    [Parameter]
    public int Id { get; set; }

    GalleryModel? gallery = new();
    public EditContext? EditContext;
    CrudOperation crudOperation = CrudOperation.Add;

    List<TabItem>? TabItems;
    TabItem? TabItemSelected;

    protected override async Task OnInitializedAsync()
    {
        TabItems = TabItem.TabItems();
        //TabItems = TabItems!.ToList();
        TabItemSelected = TabItems.FirstOrDefault()!;

        if(Id > 0)
        {
            // Warning: do not use FindAsync here.
            gallery = _db.GalleryModels.Find(Id);
            crudOperation = CrudOperation.Edit;
        }
        else
        {
            gallery!.Name = "Ank";
            gallery!.Desc = "Yjn";
            gallery.ThumbUrl = "/myassets/resources/no-image.jpg";
            gallery.ImageUrl = "/myassets/resources/no-image.jpg";
        }

        EditContext = new(gallery!);

        //EditContext.NotifyValidationStateChanged();
        //EditContext.OnFieldChanged += EditContext_OnFieldChanged!;

        await base.OnInitializedAsync();
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        //Console.WriteLine($"EditContext_OnFieldChanged - {e.FieldIdentifier.FieldName}");

        //FieldIdentifier fieldIdentifier = EditContext!.Field(e.FieldIdentifier.FieldName);

        //EditContext!.Validate();
        //StateHasChanged();
    }

    void TabItemCallback(TabItem selectedTabItem)
    {
        TabItemSelected = selectedTabItem;
    }


    private void OnIsActiveClicked()
    {
        gallery!.IsActive = !gallery.IsActive;
    }

    async void OnSubmitForm()
    {
        if (!EditContext!.GetValidationMessages().Any())
        {
            await SaveAsync(gallery!);
            GoBack();
        }
    }
    async Task SaveAsync(GalleryModel mdl)
    {

        switch (crudOperation)
        {
            case CrudOperation.Add:
                await _db.GalleryModels.AddAsync(mdl);
                break;
            case CrudOperation.Edit:
                //// cannot be tracked because another instance with the same key value for { 'Id'} is already being tracked.
                //// When attaching existing entities, ensure that only one entity instance with a given key value is attached
                _db.Entry(mdl).State = EntityState.Modified;

                _db.GalleryModels.Update(mdl);
                break;
            case CrudOperation.Delete:
                _db.GalleryModels.Remove(mdl);
                break;
            default:
                break;
        }
        await _db.SaveChangesAsync();
        //// cannot be tracked because another instance with the same key value for { 'Id'} is already being tracked.
        //// When attaching existing entities, ensure that only one entity instance with a given key value is attached
        _db.Entry<GalleryModel>(mdl).State = EntityState.Detached;
    }









    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        //await jsRuntime.InvokeVoidAsync("renderHeroSlider");
        if (firstRender)
        {
            //await js.CKEditorFileman1();
            //await js.CKEditorFileman2();
        }

    }






    private bool showRoxy = false;
    private string ElemInputId = "";
    private string ElemImgId = "";
    async void UpdateImageModelBinding()
    {
        showRoxy = false;
        string returnImage = await _js.InvokeAsync<string>("RoxyReturnImage", ElemImgId);
        switch (ElemImgId)
        {
            case "customImage":
                gallery!.ImageUrl = returnImage;
                break;
            case "customImage1":
                gallery!.ThumbUrl = gallery!.ImageUrl; //returnImage;
                break;
        }

        int lastSlash = returnImage.LastIndexOf('/');
        gallery!.PathUrl = (lastSlash > -1) ? returnImage.Substring(0, lastSlash) : returnImage;

        StateHasChanged();
    }
    private void ShowRoxyModal(string elemInputId, string elemImgId)
    {
        ElemInputId = elemInputId;
        ElemImgId = elemImgId;
        showRoxy = true;
    }

    void GoBack() => _navManager.NavigateTo("/gallery");

}




