@* Inherits from the original InputText component *@
@inherits InputText

<div class="">
    <div class="relative border border-gray-300 rounded-md px-3 shadow-sm">
        <label for="qid" class="absolute @BgColor -top-2 left-2 -mt-px inline-block px-1 bg-beeBackground text-xs font-medium text-appBlack">@Label</label>

        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            @IconLeft
        </div>

        <input @attributes="InputAttributes"
               class="p-0 block w-full border-0 py-2 text-appBlack @BgColor focus:ring-0 text-sm outline-none tracking-normal"
               id="@inputId"
               type="@inputType"
               @bind="CurrentValueAsString"
               @bind:event="oninput"
               @onkeyup="KeyboardEventHandler" />

        <div class="absolute inset-y-0 right-0 pr-3 flex items-center text-sm">
            @IconRight
        </div>
    </div>
    @ErrorValidationRF
</div>



@code {
    [Parameter]
    public Dictionary<string, object>? InputAttributes { get; set; }
    [Parameter]
    public string? BgColor { get; set; }
    [Parameter]
    public string? Label { get; set; }
    [Parameter]
    public string? inputId { get; set; }
    [Parameter]
    public string? inputType { get; set; }
    [Parameter]
    public RenderFragment? ErrorValidationRF { get; set; }
    [Parameter]
    public RenderFragment? IconLeft { get; set; }
    [Parameter]
    public RenderFragment? IconRight { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BgColor = BgColor ?? "bg-white";
        inputType = inputType ?? "text";
    }
    void KeyboardEventHandler(KeyboardEventArgs args)
    {
        //string keyCode = args.Key;

        try
        {
            //if(CurrentValueAsString!.Length > 11){
            //    string currStr = CurrentValueAsString.Substring(0, 11);
            //    CurrentValueAsString = currStr;
            //    return;
            //}

            //Console.WriteLine("string: " + keyCode);
            //switch (keyCode)
            //{
            //    case "0":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "1":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "2":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "3":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "4":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "5":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "6":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "7":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "8":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "9":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    default:
            //        Console.WriteLine("cur value: " + CurrentValueAsString);
            //        string currStr = CurrentValueAsString!.Substring(0, CurrentValueAsString.Length - 1);
            //        CurrentValueAsString = currStr;
            //        break;
            //}
        }
        catch{}
    }

}
