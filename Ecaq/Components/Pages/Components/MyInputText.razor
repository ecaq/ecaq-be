@* Inherits from the original InputText component *@
@inherits InputText

<div class="">
    <div class="relative border border-gray-300 rounded-md px-3 shadow-sm">
        <label for="qid" class="absolute bg-white -top-2 left-2 -mt-px inline-block px-1 bg-beeBackground text-xs font-medium text-appBlack">@Label</label>
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            @*<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-appGrayLight">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15 9h3.75M15 12h3.75M15 15h3.75M4.5 19.5h15a2.25 2.25 0 002.25-2.25V6.75A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25v10.5A2.25 2.25 0 004.5 19.5zm6-10.125a1.875 1.875 0 11-3.75 0 1.875 1.875 0 013.75 0zm1.294 6.336a6.721 6.721 0 01-3.17.789 6.721 6.721 0 01-3.168-.789 3.376 3.376 0 016.338 0z" />
            </svg>*@
            @IconLeft
        </div>
        <input @attributes="InputAttributes"
               class="block w-full border-0 py-2.5 pl-7 text-appBlack bg-beeBackground focus:ring-0 text-sm outline-none tracking-normal"
               id="@inputId"
               type="@inputType"
               @bind="CurrentValueAsString"
               @bind:event="oninput"
               @onkeyup="KeyboardEventHandler" />
        <div class="absolute inset-y-0 right-0 pr-3 flex items-center text-sm">
            @IconRight
        </div>
    </div>
    @*<p class="mt-1 text-xs text-red-600"><ValidationMessage For="() => qidDto.QID" /></p>*@
    @ErrorValidationRF
</div>



@code {
    [Parameter]
    public Dictionary<string, object>? InputAttributes { get; set; }
    [Parameter]
    public string? Label { get; set; }
    [Parameter]
    public string? inputId { get; set; }
    [Parameter]
    public string? inputType { get; set; }
    [Parameter]
    public RenderFragment? ErrorValidationRF { get; set; }
    [Parameter]
    public RenderFragment? IconLeft { get; set; }
    [Parameter]
    public RenderFragment? IconRight { get; set; }

    void KeyboardEventHandler(KeyboardEventArgs args)
    {
        //string keyCode = args.Key;

        try
        {
            //if(CurrentValueAsString!.Length > 11){
            //    string currStr = CurrentValueAsString.Substring(0, 11);
            //    CurrentValueAsString = currStr;
            //    return;
            //}

            //Console.WriteLine("string: " + keyCode);
            //switch (keyCode)
            //{
            //    case "0":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "1":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "2":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "3":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "4":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "5":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "6":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "7":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "8":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    case "9":
            //        //CurrentValueAsString = keyCode;
            //        break;
            //    default:
            //        Console.WriteLine("cur value: " + CurrentValueAsString);
            //        string currStr = CurrentValueAsString!.Substring(0, CurrentValueAsString.Length - 1);
            //        CurrentValueAsString = currStr;
            //        break;
            //}
        }
        catch{}
    }

}
