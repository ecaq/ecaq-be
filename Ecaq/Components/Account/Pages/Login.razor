@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Ecaq.Data
@* @rendermode InteractiveAuto *@

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sign in</PageTitle>



<!--
  This example requires some changes to your config:

  ```
  // tailwind.config.js
  module.exports = {
    // ...
    plugins: [
      // ...
      require('@tailwindcss/forms'),
    ],
  }
  ```
-->
<!--
  This example requires updating your template:

  ```
  <html class="h-full bg-white">
  <body class="h-full">
  ```
-->
<div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-sm">
        <h2 class="mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900">Sign in to your account</h2>
    </div>
    <div class="mt-6 sm:mx-auto sm:w-full sm:max-w-sm">
        @* <StatusMessage Message="@errorMessage" /> *@
        <EditForm class="space-y-6" Model="Input" method="POST" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <div>
@*                 <label for="email" class="block text-sm font-medium leading-6 text-gray-900">Email address</label>
                <div class="mt-2">
                    <InputText @bind-Value="@Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div> *@

                    <div class="relative border border-gray-300 rounded-md px-3 shadow-sm">
                        <label for="qid" class="absolute bg-white -top-2 left-2 -mt-px inline-block px-1 bg-beeBackground text-xs font-medium text-appBlack">Email</label>
                        <InputText @bind-Value="@Input.Email" aria-required="true" placeholder=""
                               class="p-0 block w-full border-0 py-2 text-appBlack bg-white focus:ring-0 text-sm outline-none tracking-normal" />
                    </div>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
               

            </div>

            <div>
@*                 <label for="email" class="block text-sm font-medium leading-6 text-gray-900">Password</label>
                <div class="mt-2">
                    <InputText type="password" @bind-Value="@Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div> *@

                    <div class="relative border border-gray-300 rounded-md px-3 shadow-sm">
                        <label for="qid" class="absolute bg-white -top-2 left-2 -mt-px inline-block px-1 bg-beeBackground text-xs font-medium text-appBlack">Password</label>
                        <InputText type="password" @bind-Value="@Input.Password" aria-required="true" placeholder=""
                                   class="p-0 block w-full border-0 py-2 text-appBlack bg-white focus:ring-0 text-sm outline-none tracking-normal" />
                    </div>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                
            </div>

            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <InputCheckbox @bind-Value="Input.RememberMe" id="RememberMe" type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded" />
                    <label for="RememberMe" class="ml-2 mb-0 block text-sm text-gray-900"> Remember me </label>
                </div>
                <div class="text-sm">
                    <a href="Account/ForgotPassword" class="font-medium text-appPriBlue hover:text-appGrayLight"> Forgot your password? </a>
                </div>
            </div>

            <div class="mb-2">
                <button type="submit" class="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Sign in</button>
            </div>
        </EditForm>

        @*         <p class="mt-10 text-center text-sm text-gray-500">
        Not a member?
        <a href="#" class="font-semibold leading-6 text-indigo-600 hover:text-indigo-500">Start a 14 day free trial</a>
        </p> *@

    </div>

</div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    string inputType = "password";

    protected override async Task OnInitializedAsync()
    {
        if(HttpContext is not null)
        {
          
            if (HttpMethods.IsGet(HttpContext.Request.Method))
            {
                // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }  
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    public void ToggleShowPwd()
    {
        if (inputType == "password")
        {
            inputType = "text";
        }
        else
        {
            inputType = "password";
        }
        //StateHasChanged();
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
